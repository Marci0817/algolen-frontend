/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
    AppCallTransactionResult,
    AppCallTransactionResultOfType,
    CoreAppCallArgs,
    RawAppCallArgs,
    AppState,
    TealTemplateParams,
    ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
    AppClientCallCoreParams,
    AppClientCompilationParams,
    AppClientDeployCoreParams,
    AppDetails,
    ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type {
    SendTransactionResult,
    TransactionToSign,
    SendTransactionFrom,
} from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import {
    Algodv2,
    OnApplicationComplete,
    Transaction,
    AtomicTransactionComposer,
} from 'algosdk'
export const APP_SPEC: AppSpec = {
    hints: {
        'list_nft(axfer,uint64,uint64,uint64)bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
        'delist_nft(pay)bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
        'opt_in_to_asset(pay)bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
        'rent_nft(pay,uint64)bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
        'return_nft(axfer)bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
        'claim_deposit()bool': {
            call_config: {
                no_op: 'CALL',
            },
        },
    },
    source: {
        approval:
            '',
        clear: 'I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu',
    },
    state: {
        global: {
            num_byte_slices: 0,
            num_uints: 0,
        },
        local: {
            num_byte_slices: 0,
            num_uints: 0,
        },
    },
    schema: {
        global: {
            declared: {},
            reserved: {},
        },
        local: {
            declared: {},
            reserved: {},
        },
    },
    contract: {
        name: 'algolen',
        methods: [
            {
                name: 'list_nft',
                args: [
                    {
                        type: 'axfer',
                        name: 'asset_transfer_txn',
                    },
                    {
                        type: 'uint64',
                        name: 'deposit',
                    },
                    {
                        type: 'uint64',
                        name: 'price_per_day',
                    },
                    {
                        type: 'uint64',
                        name: 'max_duration_in_days',
                    },
                ],
                returns: {
                    type: 'bool',
                },
            },
            {
                name: 'delist_nft',
                args: [
                    {
                        type: 'pay',
                        name: 'fee_payment_txn',
                    },
                ],
                returns: {
                    type: 'bool',
                },
            },
            {
                name: 'opt_in_to_asset',
                args: [
                    {
                        type: 'pay',
                        name: 'deposit_payment_txn',
                    },
                ],
                returns: {
                    type: 'bool',
                },
                desc: 'An opt-in contract method\nOne time payment of LISTING_FEE_MICROALGO amount covers opt in, box creation for this nft and a small fee for the platform usage This fee is to be paid per NFT and permanently enables the listing of this NFT',
            },
            {
                name: 'rent_nft',
                args: [
                    {
                        type: 'pay',
                        name: 'payment_txn',
                    },
                    {
                        type: 'uint64',
                        name: 'duration_in_days',
                    },
                ],
                returns: {
                    type: 'bool',
                },
            },
            {
                name: 'return_nft',
                args: [
                    {
                        type: 'axfer',
                        name: 'asset_transfer_txn',
                    },
                ],
                returns: {
                    type: 'bool',
                },
            },
            {
                name: 'claim_deposit',
                args: [],
                returns: {
                    type: 'bool',
                },
            },
        ],
        networks: {},
        desc: 'Algolen Contract',
    },
    bare_call_config: {
        delete_application: 'CALL',
        no_op: 'CREATE',
        update_application: 'CALL',
    },
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
    onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC
}
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
    onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC
}
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
    onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC
}
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
    onCompleteAction:
        | 'delete_application'
        | OnApplicationComplete.DeleteApplicationOC
}
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
    onCompleteAction:
        | 'update_application'
        | OnApplicationComplete.UpdateApplicationOC
}
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
    /**
     * Gets the state value as a BigInt
     */
    asBigInt(): bigint
    /**
     * Gets the state value as a number.
     */
    asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
    /**
     * Gets the state value as a Uint8Array
     */
    asByteArray(): Uint8Array
    /**
     * Gets the state value as a string
     */
    asString(): string
}

/**
 * Defines the types of available calls and state of the Algolen smart contract.
 */
export type Algolen = {
    /**
     * Maps method signatures / names to their argument and return types.
     */
    methods: Record<
        'list_nft(axfer,uint64,uint64,uint64)bool' | 'list_nft',
        {
            argsObj: {
                asset_transfer_txn:
                    | TransactionToSign
                    | Transaction
                    | Promise<SendTransactionResult>
                deposit: bigint | number
                price_per_day: bigint | number
                max_duration_in_days: bigint | number
            }
            argsTuple: [
                asset_transfer_txn:
                    | TransactionToSign
                    | Transaction
                    | Promise<SendTransactionResult>,
                deposit: bigint | number,
                price_per_day: bigint | number,
                max_duration_in_days: bigint | number,
            ]
            returns: boolean
        }
    > &
        Record<
            'delist_nft(pay)bool' | 'delist_nft',
            {
                argsObj: {
                    fee_payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>
                }
                argsTuple: [
                    fee_payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>,
                ]
                returns: boolean
            }
        > &
        Record<
            'opt_in_to_asset(pay)bool' | 'opt_in_to_asset',
            {
                argsObj: {
                    deposit_payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>
                }
                argsTuple: [
                    deposit_payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>,
                ]
                returns: boolean
            }
        > &
        Record<
            'rent_nft(pay,uint64)bool' | 'rent_nft',
            {
                argsObj: {
                    payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>
                    duration_in_days: bigint | number
                }
                argsTuple: [
                    payment_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>,
                    duration_in_days: bigint | number,
                ]
                returns: boolean
            }
        > &
        Record<
            'return_nft(axfer)bool' | 'return_nft',
            {
                argsObj: {
                    asset_transfer_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>
                }
                argsTuple: [
                    asset_transfer_txn:
                        | TransactionToSign
                        | Transaction
                        | Promise<SendTransactionResult>,
                ]
                returns: boolean
            }
        > &
        Record<
            'claim_deposit()bool' | 'claim_deposit',
            {
                argsObj: {}
                argsTuple: []
                returns: boolean
            }
        >
}
/**
 * Defines the possible abi call signatures
 */
export type AlgolenSig = keyof Algolen['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgolenSig | undefined> = {
    method: TSignature
    methodArgs: TSignature extends undefined
        ? undefined
        : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams &
    CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Algolen smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgolenSig> =
    Algolen['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Algolen smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgolenSig> =
    Algolen['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgolenCreateCalls = (typeof AlgolenCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgolenCreateCallParams = TypedCallParams<undefined> &
    OnCompleteNoOp
/**
 * A factory for available 'update' calls
 */
export type AlgolenUpdateCalls = (typeof AlgolenCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AlgolenUpdateCallParams = TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type AlgolenDeleteCalls = (typeof AlgolenCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AlgolenDeleteCallParams = TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgolenDeployArgs = {
    deployTimeParams?: TealTemplateParams
    /**
     * A delegate which takes a create call factory and returns the create call params for this smart contract
     */
    createCall?: (callFactory: AlgolenCreateCalls) => AlgolenCreateCallParams
    /**
     * A delegate which takes a update call factory and returns the update call params for this smart contract
     */
    updateCall?: (callFactory: AlgolenUpdateCalls) => AlgolenUpdateCallParams
    /**
     * A delegate which takes a delete call factory and returns the delete call params for this smart contract
     */
    deleteCall?: (callFactory: AlgolenDeleteCalls) => AlgolenDeleteCallParams
}

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgolenCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the algolen smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(
                params: BareCallArgs &
                    AppClientCallCoreParams &
                    CoreAppCallArgs &
                    AppClientCompilationParams &
                    OnCompleteNoOp = {}
            ) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                }
            },
        }
    }

    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the algolen smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(
                params: BareCallArgs &
                    AppClientCallCoreParams &
                    CoreAppCallArgs &
                    AppClientCompilationParams = {}
            ) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                }
            },
        }
    }

    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the algolen smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(
                params: BareCallArgs &
                    AppClientCallCoreParams &
                    CoreAppCallArgs = {}
            ) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                }
            },
        }
    }

    /**
     * Constructs a no op call for the list_nft(axfer,uint64,uint64,uint64)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static listNft(
        args: MethodArgs<'list_nft(axfer,uint64,uint64,uint64)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'list_nft(axfer,uint64,uint64,uint64)bool' as const,
            methodArgs: Array.isArray(args)
                ? args
                : [
                      args.asset_transfer_txn,
                      args.deposit,
                      args.price_per_day,
                      args.max_duration_in_days,
                  ],
            ...params,
        }
    }
    /**
     * Constructs a no op call for the delist_nft(pay)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static delistNft(
        args: MethodArgs<'delist_nft(pay)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'delist_nft(pay)bool' as const,
            methodArgs: Array.isArray(args) ? args : [args.fee_payment_txn],
            ...params,
        }
    }
    /**
   * Constructs a no op call for the opt_in_to_asset(pay)bool ABI method
   *
   * An opt-in contract method
One time payment of LISTING_FEE_MICROALGO amount covers opt in, box creation for this nft and a small fee for the platform usage This fee is to be paid per NFT and permanently enables the listing of this NFT
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
    static optInToAsset(
        args: MethodArgs<'opt_in_to_asset(pay)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'opt_in_to_asset(pay)bool' as const,
            methodArgs: Array.isArray(args) ? args : [args.deposit_payment_txn],
            ...params,
        }
    }
    /**
     * Constructs a no op call for the rent_nft(pay,uint64)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static rentNft(
        args: MethodArgs<'rent_nft(pay,uint64)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'rent_nft(pay,uint64)bool' as const,
            methodArgs: Array.isArray(args)
                ? args
                : [args.payment_txn, args.duration_in_days],
            ...params,
        }
    }
    /**
     * Constructs a no op call for the return_nft(axfer)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static returnNft(
        args: MethodArgs<'return_nft(axfer)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'return_nft(axfer)bool' as const,
            methodArgs: Array.isArray(args) ? args : [args.asset_transfer_txn],
            ...params,
        }
    }
    /**
     * Constructs a no op call for the claim_deposit()bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static claimDeposit(
        args: MethodArgs<'claim_deposit()bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs
    ) {
        return {
            method: 'claim_deposit()bool' as const,
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        }
    }
}

/**
 * A client to make calls to the algolen smart contract
 */
export class AlgolenClient {
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    public readonly appClient: ApplicationClient

    private readonly sender: SendTransactionFrom | undefined

    /**
     * Creates a new instance of `AlgolenClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(
        appDetails: AppDetails,
        private algod: Algodv2
    ) {
        this.sender = appDetails.sender
        this.appClient = algokit.getAppClient(
            {
                ...appDetails,
                app: APP_SPEC,
            },
            algod
        )
    }

    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    protected mapReturnValue<TReturn>(
        result: AppCallTransactionResult,
        returnValueFormatter?: (value: any) => TReturn
    ): AppCallTransactionResultOfType<TReturn> {
        if (result.return?.decodeError) {
            throw result.return.decodeError
        }
        const returnValue =
            result.return?.returnValue !== undefined &&
            returnValueFormatter !== undefined
                ? returnValueFormatter(result.return.returnValue)
                : (result.return?.returnValue as TReturn | undefined)
        return { ...result, return: returnValue }
    }

    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    public async call<TSignature extends keyof Algolen['methods']>(
        typedCallParams: TypedCallParams<TSignature>,
        returnValueFormatter?: (value: any) => MethodReturn<TSignature>
    ) {
        return this.mapReturnValue<MethodReturn<TSignature>>(
            await this.appClient.call(typedCallParams),
            returnValueFormatter
        )
    }

    /**
     * Idempotently deploys the algolen smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    public deploy(
        params: AlgolenDeployArgs & AppClientDeployCoreParams = {}
    ): ReturnType<ApplicationClient['deploy']> {
        const createArgs = params.createCall?.(AlgolenCallFactory.create)
        const updateArgs = params.updateCall?.(AlgolenCallFactory.update)
        const deleteArgs = params.deleteCall?.(AlgolenCallFactory.delete)
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        })
    }

    /**
     * Gets available create methods
     */
    public get create() {
        const $this = this
        return {
            /**
             * Creates a new instance of the algolen smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            bare(
                args: BareCallArgs &
                    AppClientCallCoreParams &
                    AppClientCompilationParams &
                    CoreAppCallArgs &
                    OnCompleteNoOp = {}
            ): Promise<AppCallTransactionResultOfType<undefined>> {
                return $this.appClient.create(args) as unknown as Promise<
                    AppCallTransactionResultOfType<undefined>
                >
            },
        }
    }

    /**
     * Gets available update methods
     */
    public get update() {
        const $this = this
        return {
            /**
             * Updates an existing instance of the algolen smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            bare(
                args: BareCallArgs &
                    AppClientCallCoreParams &
                    AppClientCompilationParams &
                    CoreAppCallArgs = {}
            ): Promise<AppCallTransactionResultOfType<undefined>> {
                return $this.appClient.update(args) as unknown as Promise<
                    AppCallTransactionResultOfType<undefined>
                >
            },
        }
    }

    /**
     * Gets available delete methods
     */
    public get delete() {
        const $this = this
        return {
            /**
             * Deletes an existing instance of the algolen smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The delete result
             */
            bare(
                args: BareCallArgs &
                    AppClientCallCoreParams &
                    CoreAppCallArgs = {}
            ): Promise<AppCallTransactionResultOfType<undefined>> {
                return $this.appClient.delete(args) as unknown as Promise<
                    AppCallTransactionResultOfType<undefined>
                >
            },
        }
    }

    /**
     * Makes a clear_state call to an existing instance of the algolen smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    public clearState(
        args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.appClient.clearState(args)
    }

    /**
     * Calls the list_nft(axfer,uint64,uint64,uint64)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    public listNft(
        args: MethodArgs<'list_nft(axfer,uint64,uint64,uint64)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.listNft(args, params))
    }

    /**
     * Calls the delist_nft(pay)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    public delistNft(
        args: MethodArgs<'delist_nft(pay)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.delistNft(args, params))
    }

    /**
   * Calls the opt_in_to_asset(pay)bool ABI method.
   *
   * An opt-in contract method
One time payment of LISTING_FEE_MICROALGO amount covers opt in, box creation for this nft and a small fee for the platform usage This fee is to be paid per NFT and permanently enables the listing of this NFT
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
    public optInToAsset(
        args: MethodArgs<'opt_in_to_asset(pay)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.optInToAsset(args, params))
    }

    /**
     * Calls the rent_nft(pay,uint64)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    public rentNft(
        args: MethodArgs<'rent_nft(pay,uint64)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.rentNft(args, params))
    }

    /**
     * Calls the return_nft(axfer)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    public returnNft(
        args: MethodArgs<'return_nft(axfer)bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.returnNft(args, params))
    }

    /**
     * Calls the claim_deposit()bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    public claimDeposit(
        args: MethodArgs<'claim_deposit()bool'>,
        params: AppClientCallCoreParams & CoreAppCallArgs = {}
    ) {
        return this.call(AlgolenCallFactory.claimDeposit(args, params))
    }

    public compose(): AlgolenComposer {
        const client = this
        const atc = new AtomicTransactionComposer()
        let promiseChain: Promise<unknown> = Promise.resolve()
        const resultMappers: Array<undefined | ((x: any) => any)> = []
        return {
            listNft(
                args: MethodArgs<'list_nft(axfer,uint64,uint64,uint64)bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.listNft(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            delistNft(
                args: MethodArgs<'delist_nft(pay)bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.delistNft(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            optInToAsset(
                args: MethodArgs<'opt_in_to_asset(pay)bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.optInToAsset(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            rentNft(
                args: MethodArgs<'rent_nft(pay,uint64)bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.rentNft(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            returnNft(
                args: MethodArgs<'return_nft(axfer)bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.returnNft(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            claimDeposit(
                args: MethodArgs<'claim_deposit()bool'>,
                params?: AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.claimDeposit(args, {
                        ...params,
                        sendParams: {
                            ...params?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            get update() {
                const $this = this
                return {
                    bare(
                        args?: BareCallArgs &
                            AppClientCallCoreParams &
                            AppClientCompilationParams &
                            CoreAppCallArgs
                    ) {
                        promiseChain = promiseChain.then(() =>
                            client.update.bare({
                                ...args,
                                sendParams: {
                                    ...args?.sendParams,
                                    skipSending: true,
                                    atc,
                                },
                            })
                        )
                        resultMappers.push(undefined)
                        return $this
                    },
                }
            },
            get delete() {
                const $this = this
                return {
                    bare(
                        args?: BareCallArgs &
                            AppClientCallCoreParams &
                            CoreAppCallArgs
                    ) {
                        promiseChain = promiseChain.then(() =>
                            client.delete.bare({
                                ...args,
                                sendParams: {
                                    ...args?.sendParams,
                                    skipSending: true,
                                    atc,
                                },
                            })
                        )
                        resultMappers.push(undefined)
                        return $this
                    },
                }
            },
            clearState(
                args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
            ) {
                promiseChain = promiseChain.then(() =>
                    client.clearState({
                        ...args,
                        sendParams: {
                            ...args?.sendParams,
                            skipSending: true,
                            atc,
                        },
                    })
                )
                resultMappers.push(undefined)
                return this
            },
            addTransaction(
                txn:
                    | TransactionWithSigner
                    | TransactionToSign
                    | Transaction
                    | Promise<SendTransactionResult>,
                defaultSender?: SendTransactionFrom
            ) {
                promiseChain = promiseChain.then(async () =>
                    atc.addTransaction(
                        await algokit.getTransactionWithSigner(
                            txn,
                            defaultSender ?? client.sender
                        )
                    )
                )
                return this
            },
            async atc() {
                await promiseChain
                return atc
            },
            async execute() {
                await promiseChain
                const result = await algokit.sendAtomicTransactionComposer(
                    { atc, sendParams: {} },
                    client.algod
                )
                return {
                    ...result,
                    returns: result.returns?.map((val, i) =>
                        resultMappers[i] !== undefined
                            ? resultMappers[i]!(val.returnValue)
                            : val.returnValue
                    ),
                }
            },
        } as unknown as AlgolenComposer
    }
}
export type AlgolenComposer<TReturns extends [...any[]] = []> = {
    /**
     * Calls the list_nft(axfer,uint64,uint64,uint64)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    listNft(
        args: MethodArgs<'list_nft(axfer,uint64,uint64,uint64)bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<
        [...TReturns, MethodReturn<'list_nft(axfer,uint64,uint64,uint64)bool'>]
    >

    /**
     * Calls the delist_nft(pay)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delistNft(
        args: MethodArgs<'delist_nft(pay)bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, MethodReturn<'delist_nft(pay)bool'>]>

    /**
   * Calls the opt_in_to_asset(pay)bool ABI method.
   *
   * An opt-in contract method
One time payment of LISTING_FEE_MICROALGO amount covers opt in, box creation for this nft and a small fee for the platform usage This fee is to be paid per NFT and permanently enables the listing of this NFT
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
    optInToAsset(
        args: MethodArgs<'opt_in_to_asset(pay)bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, MethodReturn<'opt_in_to_asset(pay)bool'>]>

    /**
     * Calls the rent_nft(pay,uint64)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    rentNft(
        args: MethodArgs<'rent_nft(pay,uint64)bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, MethodReturn<'rent_nft(pay,uint64)bool'>]>

    /**
     * Calls the return_nft(axfer)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    returnNft(
        args: MethodArgs<'return_nft(axfer)bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, MethodReturn<'return_nft(axfer)bool'>]>

    /**
     * Calls the claim_deposit()bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    claimDeposit(
        args: MethodArgs<'claim_deposit()bool'>,
        params?: AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, MethodReturn<'claim_deposit()bool'>]>

    /**
     * Gets available update methods
     */
    readonly update: {
        /**
         * Updates an existing instance of the algolen smart contract using a bare call.
         *
         * @param args The arguments for the bare call
         * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
         */
        bare(
            args?: BareCallArgs &
                AppClientCallCoreParams &
                AppClientCompilationParams &
                CoreAppCallArgs
        ): AlgolenComposer<[...TReturns, undefined]>
    }

    /**
     * Gets available delete methods
     */
    readonly delete: {
        /**
         * Deletes an existing instance of the algolen smart contract using a bare call.
         *
         * @param args The arguments for the bare call
         * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
         */
        bare(
            args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
        ): AlgolenComposer<[...TReturns, undefined]>
    }

    /**
     * Makes a clear_state call to an existing instance of the algolen smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
    ): AlgolenComposer<[...TReturns, undefined]>

    /**
     * Adds a transaction to the composer
     *
     * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
     * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
     */
    addTransaction(
        txn:
            | TransactionWithSigner
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom
    ): AlgolenComposer<TReturns>
    /**
     * Returns the underlying AtomicTransactionComposer instance
     */
    atc(): Promise<AtomicTransactionComposer>
    /**
     * Executes the transaction group and returns an array of results
     */
    execute(): Promise<AlgolenComposerResults<TReturns>>
}
export type AlgolenComposerResults<TReturns extends [...any[]]> = {
    returns: TReturns
    groupId: string
    txIds: string[]
    transactions: Transaction[]
}
